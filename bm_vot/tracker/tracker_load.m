function [tracker] = tracker_load(identifier, varargin)
% tracker_load Create a new tracker descriptor structure
%
% tracker = tracker_load(identifier, ...) 
%
% Create a new tracker structure by searching for a tracker definition file using given
% tracker identifier string.
%
% Input:
% - identifier: A valid tracker identifier string. See `valid_identifier` for more details.
% - varargin[Version]: Version of a tracker. See tracker versioning for more details.
% - varargin[MakeDirectory]: A boolean indicating if a result directory should be automatically generated.
%
% Output:
% - tracker: A new tracker structure.

version = [];
makedirectory = true;

for i = 1:2:length(varargin)
    switch lower(varargin{i})
        case 'version'
            version = varargin{i+1};            
        case 'makedirectory'
            makedirectory = varargin{i+1};  
        otherwise 
            error(['Unknown switch ', varargin{i},'!']) ;
    end
end 

if isempty(version)
    tokens = regexp(identifier,':','split');
    if numel(tokens) > 2
        error('Error: %s is not a valid tracker identifier.', identifier);
    elseif numel(tokens) == 2
        family_identifier = tokens{1}; % Override family identifier
        version = tokens{2}; % The second part is the version
    else
        family_identifier = identifier; % By default these are both the same
    end;
else
    family_identifier = identifier;
    identifier = sprintf('%s:%s', identifier, num2str(version));
end;

result_directory = fullfile(get_global_variable('directory'), 'results', identifier);

if makedirectory
    mkpath(result_directory);
end;

[identifier_valid, identifier_conditional] = valid_identifier(family_identifier);
configuration_found = exist(['tracker_' , family_identifier]) ~= 2; %#ok<EXIST>

if ~identifier_conditional
    error('Error: %s is not a valid tracker identifier.', family_identifier);
end;

if configuration_found || ~identifier_valid
    
	if ~identifier_valid
		print_text('WARNING: Identifier %s contains characters that should not be used.', identifier);
	end

    if ~isempty(version)
        tracker_label = sprintf('%s (%s)', family_identifier, num2str(version));
	else
		tracker_label = family_identifier;
    end;
    
    print_text('WARNING: No configuration for tracker %s found', identifier);
    tracker = struct('identifier', identifier, 'command', [], ...
        'directory', result_directory, 'linkpath', [], ...
        'label', tracker_label, 'autogenerated', true, 'metadata', struct(), ...
		'interpreter', [], 'trax', false, 'version', version, ...
        'family', family_identifier);
else

	tracker_metadata = struct();
	tracker_label = [];
	tracker_interpreter = [];
	tracker_linkpath = {};
	tracker_trax = [];
    tracker_trax_parameters = {};

	tracker_configuration = str2func(['tracker_' , family_identifier]);
	tracker_configuration();

    if isempty(tracker_label) || ~ischar(tracker_label)
        if ~isempty(version)
            tracker_label = sprintf('%s (%s)', tracker_label, num2str(version));
        else
            tracker_label = identifier;
        end;
    end;
    
    if isempty(tracker_interpreter)
        % Additional precaution for Matlab trackers (because they have
        % to be executed differently on Windows and are prettly slow)
        % Detect if a tracker is executed using Matlab
        % and set the interpreter value correctly
        if ispc()
            matlab_executable = fullfile(matlabroot, 'bin', 'matlab.exe');
        else
            matlab_executable = fullfile(matlabroot, 'bin', 'matlab');
        end
        
        if ~isempty(strfind(lower(tracker_command), lower(matlab_executable)))
            tracker_interpreter = 'matlab';
        end
    end
    
	tracker = struct('identifier', identifier, 'command', tracker_command, ...
		    'directory', result_directory, 'linkpath', {tracker_linkpath}, ...
		    'label', tracker_label, 'interpreter', tracker_interpreter, ...
		    'autogenerated', false, 'version', version, 'family', family_identifier);
        
    if isempty(tracker_trax)
        tracker_trax = trax_test(tracker);
        if ~tracker_trax
            print_text('');
            print_text('***************************************************************************');
            print_text('');
            print_text('Warning: TraX protocol was not detected using automatic test.');
            print_text('This means that the tracker either does not support the protocol or there');
            print_text('was the error in the configuration. In the first case please set tracker_trax');
            print_text('variable to false in your tracker description file to manually disable testing.');
            print_text('In the second case investigate the error logs to determine the cause of the.');
            print_text('error.');
            print_text('');
            print_text('***************************************************************************');
            print_text('');
        end;
    end;
        
	if tracker_trax
		trax_executable = get_global_variable('trax_client', '');
		if isempty(trax_executable) && ~isempty(tracker.command)
		    error('TraX support not available');
		end;
		tracker.run = @trax_wrapper;
		tracker.trax = true;
        tracker.trax_parameters = tracker_trax_parameters;
		%tracker.linkpath{end+1} = fullfile(matlabroot, 'bin', lower(computer('arch')));
    else
		tracker.run = @system_wrapper;
		tracker.trax = false;
	end;

	if isstruct(tracker_metadata)
		tracker.metadata = tracker_metadata;
	else
		tracker.metadata = struct();
	end;
end;

performance_filename = fullfile(tracker.directory, 'performance.txt');

if exist(performance_filename, 'file')
    tracker.performance = readstruct(performance_filename);
else
    tracker.performance = readstruct(benchmark_hardware());
end;


